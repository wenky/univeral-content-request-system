/*
 * Created on Jan 26, 2005
 *
 */
/*
**********************************************************************

 Confidential Property of Medtronic, Inc.
 c Copyright Medtronic, Inc. 2006.
 All Rights reserved.
 May not be used without prior written agreement
 signed by a corporate officer.

***********************************************************************

 Project        MRCS
 Version        4.1.1
 Description
 Created on

***********************************************************************

 CVS Maintained Data

 Filename       $RCSfile: FinishWFT.java,v $
 Author         $Author: muellc4 $
 Revision       $Revision: 1.2 $
 Modified on    $Date: 2006/06/30 22:53:20 $

***********************************************************************
*/

package com.medtronic.documentum.mrcs.client;


import java.util.HashMap;
import java.util.Map;

import com.documentum.com.DfClientX;
import com.documentum.com.IDfClientX;
import com.documentum.fc.client.DfQuery;
import com.documentum.fc.client.IDfClient;
import com.documentum.fc.client.IDfCollection;
import com.documentum.fc.client.IDfDocument;
import com.documentum.fc.client.IDfQuery;
import com.documentum.fc.common.DfException;
import com.documentum.fc.common.DfLogger;
import com.documentum.fc.common.IDfAttr;
import com.documentum.services.workflow.inbox.IWorkflowTask;
import com.documentum.web.common.ArgumentList;
import com.documentum.web.common.ErrorMessageService;
import com.documentum.web.common.WrapperRuntimeException;
import com.documentum.web.form.Control;
import com.documentum.web.form.control.DropDownList;
import com.documentum.web.form.control.Label;
import com.documentum.web.form.control.Password;
import com.documentum.web.form.control.Text;
import com.documentum.webcomponent.library.messages.MessageService;
import com.documentum.webcomponent.library.workflow.taskmanager.FinishWorkflowTask;
import com.medtronic.documentum.mrcs.common.MrcsPreConditions;
import com.medtronic.documentum.mrcs.common.MrcsRejectReason;
import com.medtronic.documentum.mrcs.common.MrcsWFTaskActions;
import com.medtronic.documentum.mrcs.config.ESignatureConfigFactory;
import com.medtronic.documentum.mrcs.config.MrcsPlugin;
import com.medtronic.documentum.mrcs.config.MrcsPreconditionsFactory;
import com.medtronic.documentum.mrcs.config.StateTransitionConfigFactory;
import com.medtronic.documentum.mrcs.sbo.ESignServiceSBO;
import com.medtronic.documentum.mrcs.sbo.dto.ESignDTO;
import com.medtronic.documentum.mrcs.sbo.dto.StateInfo;
import com.medtronic.documentum.mrcs.sbo.dto.WFTaskInfo;


/**
 * @author prabhu1
 *
 * Finish workflow task component with ESignature support.
 */
public class FinishWFT extends FinishWorkflowTask {

    private IWorkflowTask iworkflowtask = null;

    private ESignDTO signature = null;

    private IDfClient client = null;

    private boolean isValid = false;

    private IDfDocument docObject = null;

    private Label rsnHdrCtrl = null;

    private Label docInfoHdrCtrl = null;

    private Label rjctrsnHdrCtrl = null;

    private Label rsnCtrl = null;

    private Label docInfoCtrl = null;

	private String appName = "";

    public FinishWFT() {
        super();
    }


    public void onInit(ArgumentList args) {
        /*-CONFIG-*/String m="onInit-";
        try {
            /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"calling super()", null, null);
            super.onInit(args);
            
            /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"calling setClientEvent for onOk", null, null);
            setClientEvent("onOk", args);
            /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"getting workflowtask", null, null);
            iworkflowtask = getWorkflowTask();
            /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"workflowtask: "+(iworkflowtask == null ? null : iworkflowtask.getActivityId().getId()), null, null);
            /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"getting signable document", null, null);
            docObject = ESignHelper.getSignableDocument(getDfSession(), iworkflowtask);
            /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"determining attached doc's MRCS app", null, null);
			appName = docObject.getString("mrcs_application");
            /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"MRCS app: "+appName, null, null);

            /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"getting references to reason, docInfo, rejectreason controls", null, null);
            rsnHdrCtrl = (Label) getControl(ESignHelper.DOCREJECT_HEADER_LBL_CONTROL_NAME, Label.class);
            docInfoHdrCtrl = (Label) getControl(ESignHelper.DOCREJECT_DOCINFOHDR_LBL_CONTROL_NAME, Label.class);
            rjctrsnHdrCtrl = (Label) getControl(ESignHelper.DOCREJECT_RSNHDR_LBL_CONTROL_NAME, Label.class);
            rsnCtrl = (Label) getControl(ESignHelper.DOCREJECT_RSNLBL_CONTROL_NAME, Label.class);
            docInfoCtrl = (Label) getControl(ESignHelper.DOCREJECT_DOCINFORSNLBL_CONTROL_NAME, Label.class);

            /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"checking if doc is suspended", null, null);
            if (docObject.isSuspended()) {
                /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this, m+"Display the Reason for Rejection", null, null);
                //Display the Reason for Rejection
                //String strlbl = getRsnLabel(docObject.getObjectId().getId());
                setRsnLabel(docObject.getObjectId().getId());
            } else {
                /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this, m+"make rejection reason controls invisible", null, null);
                rsnHdrCtrl.setVisible(false);
                docInfoHdrCtrl.setVisible(false);
                rjctrsnHdrCtrl.setVisible(false);
                rsnCtrl.setVisible(false);
                docInfoCtrl.setVisible(false);
            }

            /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"MRCS app: "+appName, null, null);
            if (iworkflowtask.isSignOffRequired()) {
                //Obtain the resons for signing and initialize the Control
                /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"signoff is required for this task", null, null);
                /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"initializing reason list dropdown", null, null);
                DropDownList rsnListCtrl = (DropDownList) getControl(ESignHelper.REASONSELECT_CONTROL_NAME,
                                                                     DropDownList.class);
                ESignHelper.initReasonList(appName, rsnListCtrl);

                //Initialize the Signature Object
                /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"initializing signature DTO object and adding listener", null, null);
                signature = new ESignDTO();
                addESignhandler();
            } else {
                setMessage("MSG_SIGN_NOTREQUIRED");
                setValid(true);
            }

        } catch (DfException excep) {
            /*-ERROR-*/DfLogger.error(this, "MRCS:FinishWFT.onInit - Exception Occurred", null, excep);
            throw new RuntimeException("Exception in initialization of MRCS FinishWFT component",excep);
        } catch (Exception ex1) {
            /*-ERROR-*/DfLogger.error(this, "MRCS:FinishWFT.onInit - Other unhandled Exceptions: ", null, ex1);
            throw new RuntimeException("Exception in initialization of MRCS FinishWFT component",ex1);
        }

    }


    public void onRender() {
        super.onRender();
        setDoValidation(false);
    }


    private void addESignhandler() {

        /*-CONFIG-*/String m="addESignhandler-";
        /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"setting up eSignHandler listeners", null, null);

        Text rsnCtrl = (Text) getControl(ESignHelper.REASONTXT_CONTROL_NAME, Text.class);
        Text usrCtrl = (Text) getControl(ESignHelper.USRTXT_CONTROL_NAME, Text.class);
        Password pswdCtrl = (Password) getControl(ESignHelper.PASSWORD_CONTROL_NAME, Password.class);

        usrCtrl.setEventHandler("onchange", "esignHandler", rsnCtrl);
        rsnCtrl.setEventHandler("onchange", "esignHandler", rsnCtrl);
        pswdCtrl.setEventHandler("onchange", "esignHandler", rsnCtrl);

    }


    public void esignHandler(Control control) {
        
        /*-CONFIG-*/String m="esignHander-";
        /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"esignHandler called", null, null);

        Text txtCtrl = null;
        Password pswdCtrl = null;

        if (control.getTypeName().equals("Text")) {
            txtCtrl = (Text) control;
            if (txtCtrl.getId().equals(ESignHelper.USRTXT_CONTROL_NAME)) {
                signature.setUsr(txtCtrl.getValue());
            }
            if (txtCtrl.getId().equals(ESignHelper.REASONTXT_CONTROL_NAME)) {
                signature.setReason(txtCtrl.getValue());
            }
        } else if (control.getTypeName().equals("Password")) {
            pswdCtrl = (Password) control;
            if (pswdCtrl.getId().equals(ESignHelper.PASSWORD_CONTROL_NAME)) {
                signature.setPswd(pswdCtrl.getValue());
            }
        }

    }


    private void performValidation() throws DfException {
        if (iworkflowtask.isSignOffRequired()) {
            setDoValidation(true);

            String usrName = signature.getUsr();
            String pswd = signature.getPswd();
            String reasonTxt = signature.getReason();

            validate();
            boolean rsn = checkReason();
           // if ((usrName != null) && (pswd != null) && (rsn)) {
            if ((usrName != null) && (usrName.trim().length() > 0)  && (pswd != null) && (rsn) ) {
                setValid(true);
            } else {
                setValid(false);
            }
        }
    }


    private boolean checkReason() {
        /*-CONFIG-*/String m="checkReason-";
        /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"checkReason called - I don't think this should ever happen for FinishWFT", null, null);
        boolean enteredReason = false;
        Text rsnCtrl = (Text) getControl(ESignHelper.REASONTXT_CONTROL_NAME, Text.class);
        DropDownList rsnList = (DropDownList) getControl(ESignHelper.REASONSELECT_CONTROL_NAME, DropDownList.class);

        if ((rsnCtrl.getValue() == null) || ((rsnCtrl.getValue().trim()).equals(""))) {
            if (rsnList.getValue().equals(ESignHelper.DEFAULT_REASON)) {
                rsnCtrl.setFocus();
                enteredReason = false;
            } else {
                rsnCtrl.setValue(rsnList.getValue());
                enteredReason = true;
                // CEM -- added this due to possible problems of completing task w/o saving the reason
                signature.setReason(rsnList.getValue());
            }
        } else {
            enteredReason = true;
        }
        return enteredReason;
    }


    private void setValid(boolean valid) {
        isValid = valid;
    }


    private boolean getValid() {
        return isValid;
    }


    public boolean onCommitChanges() {
        /*-CONFIG-*/String m="onCommitChanges-";
        boolean canCommit = false;
        try {
            performValidation();
            /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"getValid :" + getValid(), null, null);
            MrcsPlugin preCheckClass = null;
            MrcsPreConditions preCheck = null;
            Integer noSigns = null;
            try {
                /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"preCheck Document : "+ docObject, null, null);
                //Need to eliminate the usage of this try catch block by
                //better exception handling mechanizsm at Config broker
                MrcsPreconditionsFactory config = MrcsPreconditionsFactory.getPreConditionsConfig();
                /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+" config > " + config, null, null);
                preCheckClass = config.getPreconditionPlugin(appName, "ESignature");
                preCheck = (MrcsPreConditions) Class.forName(preCheckClass.PluginClassName).newInstance();
                /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"preCheck class: " + preCheck, null, null);
                ESignatureConfigFactory eSignConf = ESignatureConfigFactory.getESignConfig();
                noSigns = eSignConf.getNoOfSigsAllowed(appName);
            } catch (Exception e) {
                /*-ERROR-*/DfLogger.error(this,m+"Exception occurred while obtaining Precondition configurations" + e, null, e);
                throw new RuntimeException("FinishWFT component error in obtaining preconditions configuration",e);
            }
            HashMap map = new HashMap();
            map.put("IDfSession", getDfSession());
            map.put("IDfDocument", docObject);
            map.put("ITask", iworkflowtask);
            map.put("ESignDTO", signature);
            map.put("NoOfSigns", noSigns);

            if (super.canCommitChanges() && preCheck.isTaskEffectual(map, preCheckClass.PluginConfiguration) && getValid()) {
                canCommit = super.onCommitChanges();
                /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"canCommit (after validation and performing super call) : " + canCommit, null, null);
            } else {
                canCommit = false;
                setErrorMessage("MSG_CANNOT_ESIGN");
            }

                if (canCommit) {
                	
                    //Reject/suspend/promote the document.
                    StateTransitionConfigFactory config = StateTransitionConfigFactory.getSTConfig();
                    /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"config > " + config, null, null);
                    /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"**CurrentState: " + docObject.getCurrentStateName(), null, null);
                    /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"**TaskName : " + iworkflowtask.getTaskName(), null, null);


                    if (docObject.isSuspended()) {
                        //delete the document
                        /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"Document Suspended : delete the document..." + docObject, null, null);
                        MrcsWFRollback rlbck = new MrcsWFRollback(docObject, getDfSession());
                        canCommit = rlbck.rollback();

                    } else {
                    	
                        if (iworkflowtask.isSignOffRequired()) {
                            /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"onCommitChanges is signing the document - I don't think this should ever happen for FinishWFT", null, null);
                            //IDfClientX clientx = new DfClientX();
                            //client = clientx.getLocalClient();
                            //IDfSessionManager sMgr = client.newSessionManager();
                            //IESignServiceSBO _esignSBO = (IESignServiceSBO) client.new-Service(IESignServiceSBO.class.getName(), sMgr);
                            ESignServiceSBO _esignSBO = new ESignServiceSBO();
                            canCommit = _esignSBO.signDocument(docObject, signature);
                        }
                        
                        // pre-MRCS 4.2 legacy workflow plugin...(this is how we did workflow promotes before...)
                        // - newer configs should use a custom workflow server method
                        // - may add equivalent functionality in later...
                        if (config.isLegacyLCWF(appName)) {
	                    	// - legacy convert: moved these into this lexical scope...
	                        WFTaskInfo tskInfo = null;
	                        StateInfo stInfo = null;
	                        MrcsWFTaskActions tskExecute = null;
	                        
	                        tskInfo = config.getWFTaskInfo(appName, iworkflowtask.getTaskName());
	                        /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"onCommitChanges tskInfo : " + tskInfo, null, null);
	                        stInfo = config.getStateInfo(appName, docObject.getCurrentStateName());
	                        /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"onCommitChanges stInfo : " + stInfo, null, null);
	
	                        /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+" Document Current State : "+ docObject.getCurrentStateName(), null, null);
	                        /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+" Document Not suspended ", null, null);
	
	                        /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+" Workflow task Name " + iworkflowtask.getTaskName(), null, null);
	                        /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+" tskInfo action " + tskInfo.action, null, null);
	                        /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+" tskInfo Name " + tskInfo.Name, null, null);
	                        /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+" TaskExecutionInfo " + tskInfo.TaskExecutionInfo, null, null);
	
	                        MrcsPlugin taskPlugin = tskInfo.getMrcsPlugin();
	                        //int pluginExists = tskInfo.getMrcsPlugin().size();
	                        //if (pluginExists > 0)taskPlugin = (MrcsPlugin)
	                        // tskInfo.getMrcsPlugin().get(0);
	                        /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+" taskPlugin " + taskPlugin.toString(), null, null);
	
	                        if (taskPlugin != null) {
	                            try {
	                                tskExecute = (MrcsWFTaskActions) Class.forName(taskPlugin.PluginClassName).newInstance();
	                                /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"Mrcs tskExecute class " + tskExecute, null, null);
	                            } catch (Exception e2) {/*-DEBUG-*/
	                                /*-ERROR-*/DfLogger.error(this,m+"Error Occurred : Could not load task execution class " + e2, null, e2);
	                                throw new RuntimeException("FinishWFT component error - could not create plugin task "+taskPlugin.PluginClassName,e2);
	                            }
	
	                            /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"DOCUMENT VERSION SUMMARY " + docObject.getVersionPolicy().getVersionSummary(","), null, null);
	                            //execute the Task action
	                            Map configParams = taskPlugin.PluginConfiguration;
	                            Map params = new HashMap();
	                            params.put("MrcsConfig", configParams);
	                            params.put("IDfSession", getDfSession());
	                            params.put("IDfDocument", docObject);
	                            params.put("WfTask", tskInfo);
	                            params.put("StateInfo", stInfo);
	                            /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this, " MRCS:FinishWFT: onCommitChanges : Executing Task action..." , null, null);
	                            tskExecute.executeWFAction(params);
	                            /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this, " MRCS:FinishWFT: onCommitChanges : Mrcs Task Execution Done!!" , null, null);
	                            //if(tskInfo.getAction().equalsIgnoreCase("Promote"))//Done by task execution Class
	                            // docObject.promote("", true, false);//Done by task execution Class
	                        }
                        }
                        if (canCommit)
                            setMessage("MSG_FINISH_SUCCESS", new Object[] { super.getString("MSG_OBJECT") });

                    }

            }//commit & esign ends
        } catch (DfException e1) {
            /*-ERROR-*/DfLogger.error(this, "MRCS:FinishWFT.onCommitChanges - DfException occurred: ", null, e1);
            canCommit = false;
            try {
                if (iworkflowtask.getCompleteErrStatus() == 4) {
                    /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"Exception occurred:Incorrect Password "+ e1, null, null);
                    setErrorMessage("MSG_INCORRECT_PASSWORD");
                    return false;
                }
                /*
                 * else if(){ [DM_SYSOBJECT_E_ESIGN_SIGNATURE_METHOD_FAILED }
                 */
                else {
                    /*-ERROR-*/DfLogger.error(this, "MRCS:FinishWFT.onCommitChanges - Exception occurred:Unexpected Error ", null, e1);
                    setErrorMessage("MSG_UNEXPECTED_ERROR", new Object[] { e1.getMessage() }, e1);
                    return false;
                }
            } catch (DfException e2) {
                /*-ERROR-*/DfLogger.error(this, m+"error in exception handling code", null, e2);
                throw new WrapperRuntimeException(e2);
            }
        }

        return canCommit;
    }


    void setMessage(String s) {
        MessageService.addMessage(this, s, null);
    }


    void setMessage(com.documentum.web.form.Form form, java.lang.String s, java.lang.Object[] oParams) {
        MessageService.addMessage(this, s, oParams);
    }


    void setMessage(String s, Object aobj[]) {
        MessageService.addMessage(this, s, aobj);
    }


    void setErrorMessage(String s) {
        setReturnError(s, null, null);
        ErrorMessageService.getService().setNonFatalError(this, s, null);
    }


    void setErrorMessage(String s, Object aobj[]) {
        setReturnError(s, aobj, null);
        ErrorMessageService.getService().setNonFatalError(this, s, aobj, null);
    }


    void setErrorMessage(String s, Object aobj[], Exception exception) {
        setReturnError(s, aobj, exception);
        ErrorMessageService.getService().setNonFatalError(this, s, aobj, exception);
    }


    private void setRsnLabel(String docId) throws DfException {
        /*-CONFIG-*/String m="setRsnLabel-";
        /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"setRsnLabel called - I don't think this should ever happen for FinishWFT", null, null);
        String reasonlabel = "";
        MrcsRejectReason reason = getRejectReason(docId);
        /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+": reason   :" + reason, null, null);
        reasonlabel = docObject.getObjectName() + "\n " + reason.getDocVersion() + "\n " + reason.getRejectionComment();
        /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+": reasonlabel   :" + reasonlabel, null, null);

        rsnHdrCtrl.setVisible(true);
        rjctrsnHdrCtrl.setVisible(true);
        docInfoHdrCtrl.setVisible(true);

        // Set the Reason
        /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+": rsnCtrl : " + rsnCtrl, null, null);
        String strlbl = reason.getRejectionComment();
        rsnCtrl.setLabel(strlbl);
        rsnCtrl.setVisible(true);
        // Set the Rejected Document Info
        /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+": docInfoCtrl : " + docInfoCtrl, null, null);
        String strdoclbl = docObject.getObjectName() + ", " + reason.getDocVersion() + " @ "+ reason.getRejectedTime().toString();
        docInfoCtrl.setLabel(strdoclbl);
        docInfoCtrl.setVisible(true);

    }


    private MrcsRejectReason getRejectReason(String docId) throws DfException {
        /*-CONFIG-*/String m="getRejectReason-";
        /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this,m+"getRejectReason called - I don't think this should ever happen for FinishWFT", null, null);
        MrcsRejectReason rsn = new MrcsRejectReason();
        try {
            String qualification = "select * from mrcs_rejection where rejected_doc_object_id = '" + docId + "'";

            IDfQuery qry = new DfQuery();
            /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this, "MRCS:FinishWFT: getRejectReason: qualification : " + qualification, null, null);
            qry.setDQL(qualification);

            IDfCollection myObj1 = (IDfCollection) qry.execute(getDfSession(), IDfQuery.DF_READ_QUERY);
            /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this, "MRCS:FinishWFT: getRejectReason: myObj1 : " + myObj1, null, null);
            while (myObj1.next()) {
                for (int i = 0; i < myObj1.getAttrCount(); i++) { //For attribute
                    IDfAttr attr = myObj1.getAttr(i);
                    if (attr.getName().equalsIgnoreCase("rejected_doc_object_id")) {
                        rsn.setDocObjectId(myObj1.getId(attr.getName()));
                    }
                    if (attr.getName().equalsIgnoreCase("is_rejected_doc_active")) {
                        rsn.setRejectedDocActive(myObj1.getBoolean(attr.getName()));
                    }
                    if (attr.getName().equalsIgnoreCase("rejected_doc_chronicle_id")) {
                        rsn.setDocChronicleId(myObj1.getId(attr.getName()));
                    }
                    if (attr.getName().equalsIgnoreCase("rejected_time")) {
                        rsn.setRejectedTime(myObj1.getTime(attr.getName()));
                    }
                    if (attr.getName().equalsIgnoreCase("rejected_version")) {
                        rsn.setDocVersion(myObj1.getString(attr.getName()));
                    }
                    if (attr.getName().equalsIgnoreCase("rejection_comment")) {
                        rsn.setRejectionComment(myObj1.getString(attr.getName()));
                    }
                }
            }
            myObj1.close();

        } catch (Exception e) {
            /*-ERROR-*/DfLogger.error(this, "MRCS:FinishWFT: getRejectReason: Exception Occurred : ", null, e);
            throw new RuntimeException("MRCS FinishWFT component error in getting reject reason",e);
        }
        /*-DEBUG-*/if (DfLogger.isDebugEnabled(this))DfLogger.debug(this, "MRCS:FinishWFT: getRejectReason: (Before return)  Reject reason : " + rsn, null, null);
        return rsn;
    }

}