package org.tarantula.util;import java.io.ByteArrayInputStream;import java.io.ObjectInputStream;import java.io.StringReader;import java.security.GeneralSecurityException;import java.security.Key;import java.security.Security;import java.util.Enumeration;import java.util.HashMap;import java.util.Hashtable;import java.util.Iterator;import java.util.Vector;import javax.crypto.Cipher;import javax.naming.Context;import javax.naming.Name;import javax.naming.NameNotFoundException;import javax.naming.NameParser;import javax.naming.NamingEnumeration;import javax.naming.NamingException;import javax.naming.OperationNotSupportedException;import javax.naming.directory.Attribute;import javax.naming.directory.Attributes;import javax.naming.directory.BasicAttribute;import javax.naming.directory.BasicAttributes;import javax.naming.directory.DirContext;import javax.naming.directory.InitialDirContext;import javax.naming.directory.ModificationItem;import javax.naming.directory.SearchControls;import javax.naming.directory.SearchResult;import org.w3c.dom.Document;import org.w3c.dom.NamedNodeMap;import org.w3c.dom.Node;import org.w3c.dom.NodeList;import org.xml.sax.InputSource;import sun.misc.BASE64Decoder;import sun.misc.BASE64Encoder;import com.sun.org.apache.xerces.internal.parsers.DOMParser;public class SunLdapXQLEngine implements LdapXQLProcessor{  // new methods:  // - isConnected();  // - new processor w/same config info (clone the config and encodedecode data HashMaps)  boolean i_bConnected = false;  DirContext i_dircontext = null;  HashMap i_htConnectionData = null;  HashMap i_htEncodeDecodeData = new HashMap();  static final String i_sContextFactory = "com.sun.jndi.ldap.LdapCtxFactory";  // constructors:  public void CreateLdapXQLProcessor(HashMap a_htConnectionData, HashMap a_htEncodeDecodeData) throws Exception    {setConnectionEnvironment(a_htConnectionData); setEncodeDecodeData(a_htEncodeDecodeData);}  public void CreateLdapXQLProcessor(HashMap a_htConnectionData) throws Exception    {setConnectionEnvironment(a_htConnectionData);}  public void CreateLdapXQLProcessor(String a_sXmlConfigMessage) throws Exception    {setConfigurationWithXml(a_sXmlConfigMessage);}  // set connection environment - trivial  public void setEncodeDecodeData (HashMap a_htCustomEncodeDecodeData)    {i_htEncodeDecodeData = a_htCustomEncodeDecodeData;}  public void setConnectionEnvironment(HashMap a_htConnectionData)    {i_htConnectionData = a_htConnectionData;}  /*<LdapXQL>      <config_info>        <context_factory>com.sun.jndi.ldap.LdapCtxFactory</context_factory>        <provider_url>ldap://localhost:389/o=JNDITutorial</provider_url>      </config_info>      <encode_decode_data>        <[$configinfokey] action="literal|decode|decodedeserialize">[$configinfovalue]</[$configinfokey]>      </encode_decode_data>    </LdapXQL>*/  // set connection environment from XML message/string  public void setConfigurationWithXml(String a_sXmlConfigMessage)    throws Exception  {    //+debug+*/logger.debug("SunLdapXQLEngine.setConfigurationWithXML() :: setting config with xml: "+a_sXmlConfigMessage);    Document l_xdocLdapXqlDoc = null;    // parse the input document into a DOM tree (has to happen here since we might be checking it for connection enviroment info)    InputSource l_inXml = new InputSource(new StringReader(a_sXmlConfigMessage));    //+debug+*/logger.debug("SunLdapXQLEngine.setConfigurationWithXML() :: getting parser");    DOMParser l_parser = new DOMParser();    try {      l_parser.parse(l_inXml);    } catch (java.io.IOException ioe) {      //+error+*/logger.error("SunLdapXQLEngine.setConfigurationWithXML() :: could not read configuration xml message",ioe);      throw(ioe);    } catch (org.xml.sax.SAXException saxe) {      //+error+*/logger.error("SunLdapXQLEngine.setConfigurationWithXML() :: parse error during parse of configuration xml message",saxe);      throw(saxe);    } catch (Exception e) {      //+error+*/logger.error("SunLdapXQLEngine.setConfigurationWithXML() :: unknown exception encountered during processing of config xml message",e);      throw(e);    }    //+debug+*/logger.debug("SunLdapXQLEngine.setConfigurationWithXML() :: LDAP-XQL config xml parsed successfully");    l_xdocLdapXqlDoc = l_parser.getDocument();    // load the Connection Environment data    if (i_htConnectionData == null)      i_htConnectionData = new HashMap();    //+debug+*/logger.debug("SunLdapXQLEngine.setConfigurationWithXML() :: setting connection environment data");    OverrideConnectionEnvironment(l_xdocLdapXqlDoc);    //+debug+*/logger.debug("SunLdapXQLEngine.setConfigurationWithXML() :: connection environment data set");    // load the Connection Environment data    if (i_htEncodeDecodeData == null)      i_htEncodeDecodeData = new HashMap();    //+debug+*/logger.debug("SunLdapXQLEngine.setConfigurationWithXML() :: setting encoding/decoding data");    OverrideEncodeDecodeData(l_xdocLdapXqlDoc);    //+debug+*/logger.debug("SunLdapXQLEngine.setConfigurationWithXML() :: encode/decode data set");  }  public void Connect()    throws Exception  {    //+debug+*/logger.debug("SunLdapXQLEngine.Connect() :: adding Sun JCE crypto provider just to be safe");    Security.addProvider(new com.sun.crypto.provider.SunJCE());    try {      //+debug+*/logger.debug("SunLdapXQLEngine.Connect() :: connecting to LDAP...");      i_dircontext = new InitialDirContext(new Hashtable(i_htConnectionData));    } catch (NamingException ne) {      //+error+*/logger.error("SunLdapXQLEngine.Connect() :: naming exception thrown during connection to LDAP",ne);      throw (ne);    } catch (Exception e) {      //+error+*/logger.error("SunLdapXQLEngine.Connect() :: unknown exception thrown during connection to LDAP",e);      throw(e);    }    //+debug+*/logger.debug("SunLdapXQLEngine.Connect() :: connection to LDAP was successful");    i_bConnected = true;  }  public String ProcessLdapXQLtoXML(String a_sLdapXqlDoc) throws Exception  {    //+debug+*/logger.debug("SunLdapXQLEngine.ProcessLdapXQLtoXML() :: executing LDAP-XQL request");    Vector l_vecSearchResults = ProcessLdapXQL(a_sLdapXqlDoc);    //+debug+*/logger.debug("SunLdapXQLEngine.ProcessLdapXQLtoXML() :: request processed, converting to XML");    if (l_vecSearchResults == null)    {      // result set is empty (this also happens during execution of an insert, update, or delete)      //+debug+*/logger.debug("SunLdapXQLEngine.ProcessLdapXQLtoXML() :: result set is empty");      return "<SearchResults></SearchResults>";    }    String l_sXmlDoc = "<SearchResults>";    try {      //+debug+*/logger.debug("SunLdapXQLEngine.ProcessLdapXQLtoXML() :: request processed, converting to XML");      for (int i=0; i < l_vecSearchResults.size(); i++)      {        //+debug+*/logger.debug("SunLdapXQLEngine.ProcessLdapXQLtoXML() :: processing result "+i);        l_sXmlDoc += "<Result n=\""+i+"\">";        HashMap l_htResult = (HashMap)l_vecSearchResults.get(i);        Iterator l_enum = l_htResult.keySet().iterator();        //+debug+*/logger.debug("SunLdapXQLEngine.ProcessLdapXQLtoXML() :: iterating through result's key enumeration");        while (l_enum.hasNext())        {          String l_sKey = (String)l_enum.next();          //+debug+*/logger.debug("SunLdapXQLEngine.ProcessLdapXQLtoXML() :: key: "+l_sKey);          Object obj = l_htResult.get(l_sKey);          l_sXmlDoc += "<Property>";          l_sXmlDoc += "<Name>"+l_sKey+"</Name>";          l_sXmlDoc += "<ValueList>";          if (obj instanceof Vector) {            Vector l_vecValues = (Vector)obj;            //+debug+*/logger.debug("SunLdapXQLEngine.ProcessLdapXQLtoXML() :: multi-valued property");            for (int j=0; j < l_vecValues.size(); j++)            {              String l_sValue = l_vecValues.get(j).toString();              //+debug+*/logger.debug("SunLdapXQLEngine.ProcessLdapXQLtoXML() :: value: "+l_sValue);              l_sXmlDoc += "<Value>"+l_sValue+"</Value>";            }          }          else          {            //+debug+*/logger.debug("SunLdapXQLEngine.ProcessLdapXQLtoXML() :: single-valued: "+obj.toString());            l_sXmlDoc += "<Value>"+obj.toString()+"</Value>";          }          l_sXmlDoc += "</ValueList>";          l_sXmlDoc += "</Property>";        }        l_sXmlDoc += "</Result>";      }      l_sXmlDoc += "</SearchResults>\n";      //+debug+*/logger.debug("SunLdapXQLEngine.ProcessLdapXQLtoXML() :: results processed into XML");    } catch (Exception e) {      //+error+*/logger.error("SunLdapXQLEngine.ProcessLdapXQLtoXML() :: unknown exception thrown during result set conversion to XML",e);      throw e;    }    //+debug+*/logger.debug("SunLdapXQLEngine.ProcessLdapXQLtoXML() :: LDAP-XQL response: "+l_sXmlDoc);    return l_sXmlDoc;  }  public Vector ProcessLdapXQL(String a_sLdapXqlDoc)    throws Exception  {    Document l_xdocLdapXqlDoc = null;    // parse the input document into a DOM tree    //+debug+*/logger.debug("SunLdapXQLEngine.ProcessLdapXQL() :: Processing request: "+a_sLdapXqlDoc);    InputSource l_inXml = new InputSource(new StringReader(a_sLdapXqlDoc));    DOMParser l_parser = new DOMParser();    //+debug+*/logger.debug("SunLdapXQLEngine.ProcessLdapXQL() :: input source and parser set up, about to parse request");    try {      l_parser.parse(l_inXml);    } catch (java.io.IOException ioe) {      //+error+*/logger.error("SunLdapXQLEngine.ProcessLdapXQLtoXML() :: i/o error during parse of message",ioe);      throw(ioe);    } catch (org.xml.sax.SAXException saxe) {      //+error+*/logger.error("SunLdapXQLEngine.ProcessLdapXQLtoXML() :: parsing error during parse of message",saxe);      throw(saxe);    } catch (Exception e) {      //+error+*/logger.error("SunLdapXQLEngine.ProcessLdapXQLtoXML() :: unknown exception during parse of XQL message",e);      throw(e);    }    //+debug+*/logger.debug("SunLdapXQLEngine.ProcessLdapXQL() :: XQL request processed successfully");    l_xdocLdapXqlDoc = l_parser.getDocument();    Vector l_vecSearchResult = null;    //+debug+*/logger.debug("SunLdapXQLEngine.ProcessLdapXQL() :: processing DOM tree");    l_vecSearchResult = ProcessLdapXQL(l_xdocLdapXqlDoc.getDocumentElement());    //+debug+*/logger.debug("SunLdapXQLEngine.ProcessLdapXQL() :: LDAP-XQL DOM processed successfully");    // THIRD: return the result. We're done...    return (l_vecSearchResult);  }  // Process the insert/update/delete/select XQL message  Vector ProcessLdapXQL(Node a_node)    throws Exception  {    // determine if there is a select, insert, update, or delete "action" element present    //+debug+*/logger.debug("SunLdapXQLEngine.ProcessLdapXQL(node) :: getting child nodes");    NodeList l_nodelist = a_node.getChildNodes();    //+debug+*/logger.debug("SunLdapXQLEngine.ProcessLdapXQL(node) :: scanning for select, insert, update, or delete node");    for (int i=0; i < l_nodelist.getLength(); i++)    {      Node l_nodeChild = l_nodelist.item(i);      if (l_nodeChild.getNodeType() == Node.ELEMENT_NODE)      {        //+debug+*/logger.debug("SunLdapXQLEngine.ProcessLdapXQL(node) :: element node detected");        String l_sActionType = l_nodeChild.getNodeName();        if (l_sActionType.equals("select"))        {          //+debug+*/logger.debug("SunLdapXQLEngine.ProcessLdapXQL(node) :: select request");          Vector l_vecSR = ExecuteSelect(l_nodeChild);          return l_vecSR;        }        else if (l_sActionType.equals("update"))        {          //+debug+*/logger.debug("SunLdapXQLEngine.ProcessLdapXQL(node) :: update request");          ExecuteUpdate(l_nodeChild);          return null;        }        else if (l_sActionType.equals("insert"))        {          //+debug+*/logger.debug("SunLdapXQLEngine.ProcessLdapXQL(node) :: insert request");          ExecuteInsert(l_nodeChild);          return null;        }        else if (l_sActionType.equals("delete"))        {          //+debug+*/logger.debug("SunLdapXQLEngine.ProcessLdapXQL(node) :: delete request");          ExecuteDelete(l_nodeChild);          return null;        }        else        {          //+warning+*/logger.warn("SunLdapXQLEngine.ProcessLdapXQL(node) :: unexpected element node found, ignoring: "+l_sActionType);          /*-doing nothing-*/;        }      }    }    //+warning+*/logger.warn("SunLdapXQLEngine.ProcessLdapXQL(node) :: no executable element node detected (select, insert, update, or delete)");    return null;  }/*  <LdapXQL>      <config_info>        <context_factory>com.sun.jndi.ldap.LdapCtxFactory</context_factory>        <provider_url>ldap://localhost:389/o=JNDITutorial</provider_url>     </config_info>      <select>        <filter>search filter</filter>        <attrlist>          <attr name="attr1" action="literal"/>        </attrlist>      </select>    </LdapXQL> */  Vector ExecuteSelect(Node a_nodeSelect) throws Exception  {    // what's the LDAP search filter? what's the search scope (search scope defaults to SUBTREE_SCOPE)    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: executing select request");    NodeList l_nodelist = a_nodeSelect.getChildNodes();    Node l_nodeAttrList = null;    String l_sLdapSearchFilter = null;    String l_sLdapSearchBase = null;    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: defaulting search scope to subtree");    int l_iLdapSearchScope = SearchControls.SUBTREE_SCOPE;    for (int i=0; i < l_nodelist.getLength(); i++)    {      Node l_node = l_nodelist.item(i);      if (l_node.getNodeType() == Node.ELEMENT_NODE)        if (l_node.getNodeName().equals("filter"))        {          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: filter specification detected");          l_sLdapSearchFilter = GetElementValue(l_node);          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() ::   filter is: "+l_sLdapSearchFilter);        }        else if (l_node.getNodeName().equals("searchbase"))        {          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: searchbase specification detected");          l_sLdapSearchBase = GetElementValue(l_node);          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() ::   searchbase is: "+l_sLdapSearchBase);        }        else if (l_node.getNodeName().equals("scope"))        {          String l_sScope = GetElementValue(l_node);          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: search scope override detected");          if (l_sScope.equals("SUBTREE"))          {            l_iLdapSearchScope = SearchControls.SUBTREE_SCOPE;            //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() ::   subtree scope");          }          else if (l_sScope.equals("ONELEVEL"))          {            l_iLdapSearchScope = SearchControls.ONELEVEL_SCOPE;            //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() ::   one-level scope");          }          else if (l_sScope.equals("OBJECT"))          {            l_iLdapSearchScope = SearchControls.OBJECT_SCOPE;            //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() ::   object scope");          }          else          {            //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: no scope override detected, subtree default remains");            /*donothing*/;          }        }        else if (l_node.getNodeName().equals("attrlist"))        {          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: attribute list found");          l_nodeAttrList = l_node;        }    }    // perform some error checking: gots ta have an attr list, searchbase, and search filter    if (l_nodeAttrList == null)    {      NullPointerException nullexcpt = new NullPointerException("XQL message lacked an attribute list");      //+error+*/logger.error("SunLdapXQLEngine.ExecuteSelect() :: attribute list was not found");      throw nullexcpt;    }    if (l_sLdapSearchFilter == null)    {      NullPointerException nullexcpt = new NullPointerException("XQL message lacked a search filter");      //+error+*/logger.error("SunLdapXQLEngine.ExecuteSelect() :: no search filter found");      throw nullexcpt;    }    //pv mod aug 9 01 - commented out below code because active directory needs an empty searchbase for    //certain operations    //if (l_sLdapSearchBase == null)    //{      //l_sLdapSearchBase = "";      //NullPointerException nullexcpt = new NullPointerException("XQL message lacked a searchbase");      ////+error+*/logger.error("SunLdapXQLEngine.ExecuteSelect() :: no search base found");      //throw nullexcpt;    //}		//end pv mod    // execute search, get list of results    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: setting search controls");    SearchControls l_srchctrls = new SearchControls();    l_srchctrls.setSearchScope(l_iLdapSearchScope);    NamingEnumeration l_enumnames = null;    try {      DirContext l_ctx = i_dircontext;      //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: executing search with dir context");      l_enumnames = l_ctx.search(l_sLdapSearchBase, l_sLdapSearchFilter, l_srchctrls);      //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: search completed without error");    } catch (NamingException ne) {      //+error+*/logger.error("SunLdapXQLEngine.ExecuteSelect() :: naming exception thrown during search",ne);      throw (ne);    } catch (Exception e) {      //+error+*/logger.error("SunLdapXQLEngine.ExecuteSelect() :: unknown error during search execution",e);      throw (e);    }    // load up the list of attributes to be returned for results and the decoding to be done to their attribute value(s)    // - DN is an implicit and automatically loaded attribute    // - classname is too!    // - multi-valued attributes will be stored...as vectors in HashMaps in vectors    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: get attribute subset list and associated processing/decoding actions");    Vector l_vecAttrNames = new Vector();    Vector l_vecDecodeAction = new Vector();    Vector l_vecCustomPreDecode = new Vector();    Vector l_vecCustomDecode = new Vector();    NodeList l_nodelistAttrs = l_nodeAttrList.getChildNodes();    for (int i=0; i < l_nodelistAttrs.getLength(); i++)    {      //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: processing next node");      Node l_nodeAttr = l_nodelistAttrs.item(i);      if (l_nodeAttr.getNodeType() == Node.ELEMENT_NODE)        if (l_nodeAttr.getNodeName().equals("attr"))        {          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: attribute node found");          NamedNodeMap l_namednodemap = l_nodeAttr.getAttributes();          Node l_nodeLdapAttrName = l_namednodemap.getNamedItem("name");          if (l_nodeLdapAttrName != null)          {            l_vecAttrNames.add(GetElementValue(l_nodeLdapAttrName));            //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: adding attr "+(String)l_vecAttrNames.get(l_vecAttrNames.size()-1));            Node l_nodeDecodeAction = l_namednodemap.getNamedItem("action");            if (l_nodeDecodeAction != null)            {              l_vecDecodeAction.add(GetElementValue(l_nodeDecodeAction));              //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: -action: "+(String)l_vecDecodeAction.get(l_vecDecodeAction.size()-1));            } else {              l_vecDecodeAction.add("null");              //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: -action: no action");            }            Node l_nodeCustomPreDecode = l_namednodemap.getNamedItem("predecodeclass");            if (l_nodeCustomPreDecode != null)            {              l_vecCustomPreDecode.add(GetElementValue(l_nodeCustomPreDecode));              //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: -precustom: "+(String)l_vecCustomPreDecode.get(l_vecCustomPreDecode.size()-1));            } else {              l_vecCustomPreDecode.add("null");              //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: -precustom: no custom pre-action");            }            Node l_nodeCustomDecode = l_namednodemap.getNamedItem("postdecodeclass");            if (l_nodeCustomDecode != null)            {              l_vecCustomDecode.add(GetElementValue(l_nodeCustomDecode));              //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: -postcustom: "+(String)l_vecCustomDecode.get(l_vecCustomDecode.size()-1));            } else {              l_vecCustomDecode.add("null");              //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: -postcustom: no post-custom action");            }          } else {            //+warning+*/logger.warn("SunLdapXQLEngine.ExecuteSelect() :: attr node without name attribute");            /*donothing*/;          }        }    }    Vector l_vecSearchResults = new Vector();    try {      // step through result set and place search results in a Vector of HashMaps.      if (l_enumnames == null)      {        //+warning+*/logger.warn("SunLdapXQLEngine.ExecuteSelect() :: no search results detected!");        return null;      }      else      {        //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: iterating through the list");        while (l_enumnames.hasMore())        {          // get the current search result and add it to the results Vector          // - scan attributes, include only those specified          // - should there be an "include all attrs by default" directive as well in LdapXQL message --> later          // - apply any indicated transformation/decoding/decrypting/deserialization          // - how handle custom decoding? (interface defn, provide classpath, as usual?)          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: processing next search result - DN and classname are always added...");          SearchResult l_srchrslt = (SearchResult)l_enumnames.next();          HashMap l_htSearchResult = new HashMap();          // automatically add the DN as an attribute of this search result, regardless if it has attrs to retrieve...          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: adding DN: "+l_srchrslt.getName());          l_htSearchResult.put("distinguishedname",l_srchrslt.getName());          if (l_srchrslt.getClassName() != null)          {            //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: adding classname: "+l_srchrslt.getClassName());            l_htSearchResult.put("classname",l_srchrslt.getClassName());          } else {            //+warning+*/logger.warn("SunLdapXQLEngine.ExecuteSelect() :: no classname detected for this match");            l_htSearchResult.put("classname","");          }          // get the desired attribute list from the Ldap Object          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: about to get attribute set");          Attributes l_attrs = l_srchrslt.getAttributes();          for (int i=0; i < l_vecAttrNames.size(); i++)          {            //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: getting next attribute: "+(String)l_vecAttrNames.get(i));            Vector l_vecAttrValues = null;            Attribute l_attr = l_attrs.get((String)l_vecAttrNames.get(i));            if (l_attr != null)            {              //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: attribute found");              l_vecAttrValues = new Vector();              Enumeration l_enum = l_attr.getAll();              while (l_enum.hasMoreElements())              {                //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: processing next value of attribute");                // can we assume this is a String??? - get next attribute                String l_sAttrValue = (String)l_enum.nextElement();                // custom encoding handler (PRE)                //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: checking for pre-decoding custom action");                String l_sPreCustom = (String)l_vecCustomPreDecode.get(i);                if (!l_sPreCustom.equals("null"))                {                  // instantiate the custom encoder                  //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: pre-decoding handler found: "+l_sPreCustom);                  LdapXQLDataDecoder l_customdecoder = null;                  if (l_sPreCustom != null)                  try {                    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: instantiating pre-decoding handler");                    l_customdecoder = (LdapXQLDataDecoder)Class.forName(l_sPreCustom).newInstance();                  } catch (java.lang.ClassNotFoundException cnfe) {                    //+error+*/logger.error("SunLdapXQLEngine.ExecuteSelect() :: custom pre-decoder class not loadable",cnfe);                    throw(cnfe);                  } catch (Exception e) {                    //+error+*/logger.error("SunLdapXQLEngine.ExecuteSelect() :: exception thrown while instantiating pre-decoder class",e);                    throw(e);                  }                  // okay, now let's try to execute it                  try {                    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: executing pre-decoder");                    l_sAttrValue = (String)l_customdecoder.decode(i_dircontext, i_htEncodeDecodeData, l_sAttrValue);                    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: pre-decoder returned: "+l_sAttrValue);                  } catch (ClassCastException cce) {                    // pre-decoders must return strings...                    //+error+*/logger.error("SunLdapXQLEngine.ExecuteSelect() :: could not cast pre-decoder output to string, must be a string",cce);                    throw cce;                  } catch (Exception e) {                    //+error+*/logger.error("SunLdapXQLEngine.ExecuteSelect() :: exception thrown while executing pre-decoder class",e);                    throw(e);                  }                }                // apply specified transformation to attribute value (decrypt, decode, deserialize, etc.)                // - all decode/decrypt/deserialize code blatantly stolen from CredentialStore.java                Object l_objConvertedValue = null;                //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: checking decode operation");                String l_sDecodeAction = (String)l_vecDecodeAction.get(i);                if (l_sDecodeAction.equals("decode"))                {                  try {                    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: performing base64 decode of value: "+l_sAttrValue);                    l_objConvertedValue = new String(new BASE64Decoder().decodeBuffer(l_sAttrValue));                    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: performing base64 decode of value: "+l_objConvertedValue.toString());                  } catch (java.io.IOException ioe) {                    //+error+*/logger.error("SunLdapXQLEngine.ExecuteSelect() :: i/o exception during base64 decode",ioe);                    throw(ioe);                  }                }                else if (l_sDecodeAction.equals("decodedecrypt"))                {                  try {                    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: performing base64 decode then DESede decrypt");                    Cipher l_cipher = Cipher.getInstance((String)i_htEncodeDecodeData.get("EncryptionAlgorithm"));                    l_cipher.init(Cipher.DECRYPT_MODE, (Key)i_htEncodeDecodeData.get("EncryptionKey"));                    l_objConvertedValue = new String(l_cipher.doFinal(new BASE64Decoder().decodeBuffer(l_sAttrValue)));                    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: decoded/decrypted to: "+l_objConvertedValue.toString());                  } catch (java.io.IOException ioe) {                    //+error+*/logger.error("SunLdapXQLEngine.ExecuteSelect() :: i/o exception during base64 decode/DESede decrypt",ioe);                    throw(ioe);                  } catch (java.security.InvalidKeyException ike) {                    //+error+*/logger.error("SunLdapXQLEngine.ExecuteSelect() :: invalid key exception during base64 decode/DESede decrypt",ike);                    throw(ike);                  } catch (GeneralSecurityException gse) {                    //+error+*/logger.error("SunLdapXQLEngine.ExecuteSelect() :: general security exception during base64 decode/DESede decrypt",gse);                    throw(gse);                  }                }                else if (l_sDecodeAction.equals("decodedeserialize"))                {                  try {                    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: performing base64 decode then deserialization");                    l_objConvertedValue = new ObjectInputStream(                                             new ByteArrayInputStream(                                                new BASE64Decoder().decodeBuffer(l_sAttrValue))).readObject();                    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: base64 decode/deserialization successful");                  } catch (java.io.StreamCorruptedException sce) {                    //+error+*/logger.error("SunLdapXQLEngine.ExecuteSelect() :: decode/deserialize threw corrupted stream exception",sce);                    throw(sce);                  } catch (java.io.IOException ioe) {                    //+error+*/logger.error("SunLdapXQLEngine.ExecuteSelect() :: decode/deserialize threw i/o exception",ioe);                    throw(ioe);                  } catch (java.lang.ClassNotFoundException cnfe) {                    //+error+*/logger.error("SunLdapXQLEngine.ExecuteSelect() :: decode/deserialize threw class not found exception",cnfe);                    throw(cnfe);                  }                }                else if (l_sDecodeAction.equals("decodedecryptdeserialize"))                {                  try {                    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: performing base64 decode - DESede decryption - deserialization");                    Cipher l_cipher = Cipher.getInstance((String)i_htEncodeDecodeData.get("EncryptionAlgorithm"));                    l_cipher.init(Cipher.DECRYPT_MODE, (Key)i_htEncodeDecodeData.get("EncryptionKey"));                    l_objConvertedValue = new ObjectInputStream(                                             new ByteArrayInputStream(                                                l_cipher.doFinal(new BASE64Decoder().decodeBuffer(l_sAttrValue)))).readObject();                    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: decode-decrypt-deserialization succeeded");                  } catch (java.io.StreamCorruptedException sce) {                    //+error+*/logger.error("SunLdapXQLEngine.ExecuteSelect() :: decode/decrypt/deserialize exception - corrupted stream",sce);                    throw(sce);                  } catch (java.io.IOException ioe) {                    //+error+*/logger.error("SunLdapXQLEngine.ExecuteSelect() :: decode/decrypt/deserialize exception - i/o error",ioe);                    throw(ioe);                  } catch (java.lang.ClassNotFoundException cnfe) {                    //+error+*/logger.error("SunLdapXQLEngine.ExecuteSelect() :: decode/decrypt/deserialize exception - class not found",cnfe);                    throw(cnfe);                  } catch (java.security.InvalidKeyException ike) {                    //+error+*/logger.error("SunLdapXQLEngine.ExecuteSelect() :: decode/decrypt/deserialize exception - invalid decryption key",ike);                    throw(ike);                  } catch (GeneralSecurityException gse) {                    //+error+*/logger.error("SunLdapXQLEngine.ExecuteSelect() :: decode/decrypt/deserialize exception - general security error",gse);                    throw(gse);                  }                }                else                {                  //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: no decode, decrypt, or deserialization, just retrieve attr value");                  l_objConvertedValue = l_sAttrValue;                }                // apply custom decoder (POST)                //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: check for post-decode custom handler");                String l_sCustomDecoderClassName = (String)l_vecCustomDecode.get(i);                if (!l_sCustomDecoderClassName.equals("null"))                {                  // instantiate the custom decoder                  //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: post-decode custom handler detected: "+l_sCustomDecoderClassName);                  LdapXQLDataDecoder l_customdecoder = null;                  try {                    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: instantiating post-decode handler");                    l_customdecoder = (LdapXQLDataDecoder)Class.forName(l_sCustomDecoderClassName).newInstance();                  } catch (java.lang.ClassNotFoundException cnfe) {                    //+error+*/logger.error("SunLdapXQLEngine.ExecuteSelect() :: unable to instantiate custom handler",cnfe);                    throw(cnfe);                  }                  // okay, now let's try to execute it                  try {                    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: executing post-decode handler");                    l_objConvertedValue = l_customdecoder.decode(i_dircontext, i_htEncodeDecodeData, l_sAttrValue);                    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: handler completed without error");                  } catch (Exception e) {                    //+error+*/logger.error("SunLdapXQLEngine.ExecuteSelect() :: error thrown during exec of post-decode custom handler",e);                    throw(e);                  }                }                // add the attr value to the attr value vector                //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: adding value to value vector for this attribute");                l_vecAttrValues.add(l_objConvertedValue);              }              // add the vector of attribute value(s)            }            if (l_vecAttrValues != null)            {              //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: adding attribute to search result");              l_htSearchResult.put(l_vecAttrNames.get(i),l_vecAttrValues);            }          }          // add the search result to the search results vector          if (l_htSearchResult != null)          {            //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: adding search result to result set vector");            l_vecSearchResults.add(l_htSearchResult);          }        }      }    } catch (NamingException ne) {      //+error+*/logger.error("SunLdapXQLEngine.ExecuteSelect() :: naming exception thrown during execution of select request",ne);      throw (ne);    }    // return the search results!    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteSelect() :: returning result set");    return (l_vecSearchResults);  }  // in order to insert LDAP objects, a dumbed-down implementation of DirContext must be implemented  // that contains the attribute data of the object to be inserted into LDAP. The attribute data must  // conform to Ldap's Schema as well, or it's insertion will fail.  // ExecuteInsert() which follows the inner class declaration does all the work of packaging the  // attribute data.  class NewLdapObject implements DirContext  {    String i_sDN;    Attributes i_attrs;    public NewLdapObject(String a_sDN, Attributes a_attrs) { i_sDN = a_sDN; i_attrs = a_attrs; }    public String getNameInNamespace() {return i_sDN;}    public String toString() { return i_sDN; }    public Attributes getAttributes(Name name) throws NamingException { return getAttributes(name.toString()); }    public Attributes getAttributes(String name) throws NamingException { if (!name.equals("")) throw new NameNotFoundException(); return i_attrs; }    public Attributes getAttributes(Name name, String[] ids) throws NamingException { return getAttributes(name.toString(),ids); }    public Attributes getAttributes(String name, String[] a_strarrAttrIds) throws NamingException    {      if (!name.equals("")) throw new NameNotFoundException();      Attributes l_attrs = new BasicAttributes(true);      Attribute l_attr = null;      for (int i=0; i<a_strarrAttrIds.length; i++)      {        l_attr = i_attrs.get(a_strarrAttrIds[i]);        if (l_attr != null)          l_attrs.put(l_attr);      }      return l_attrs;    }    public Object lookup(Name name) throws NamingException {throw new OperationNotSupportedException();}    public Object lookup(String name) throws NamingException {throw new OperationNotSupportedException();}    public void bind(Name name, Object obj) throws NamingException {throw new OperationNotSupportedException();}    public void bind(String name, Object obj) throws NamingException {throw new OperationNotSupportedException();}    public void rebind(Name name, Object obj) throws NamingException {throw new OperationNotSupportedException();}    public void rebind(String name, Object obj) throws NamingException {throw new OperationNotSupportedException();}    public void unbind(Name name) throws NamingException {throw new OperationNotSupportedException();}    public void unbind(String name) throws NamingException {throw new OperationNotSupportedException();}    public void rename(Name oldName, Name newName) throws NamingException {throw new OperationNotSupportedException();}    public void rename(String oldName, String newName) throws NamingException {throw new OperationNotSupportedException();}    public NamingEnumeration list(Name name) throws NamingException {throw new OperationNotSupportedException();}    public NamingEnumeration list(String name) throws NamingException {throw new OperationNotSupportedException();}    public NamingEnumeration listBindings(Name name) throws NamingException {throw new OperationNotSupportedException();}    public NamingEnumeration listBindings(String name) throws NamingException {throw new OperationNotSupportedException();}    public void destroySubcontext(Name name) throws NamingException {throw new OperationNotSupportedException();}    public void destroySubcontext(String name) throws NamingException {throw new OperationNotSupportedException();}    public Context createSubcontext(Name name) throws NamingException {throw new OperationNotSupportedException();}    public Context createSubcontext(String name) throws NamingException {throw new OperationNotSupportedException();}    public Object lookupLink(Name name) throws NamingException {throw new OperationNotSupportedException();}    public Object lookupLink(String name) throws NamingException {throw new OperationNotSupportedException();}    public NameParser getNameParser(Name name) throws NamingException {throw new OperationNotSupportedException();}    public NameParser getNameParser(String name) throws NamingException {throw new OperationNotSupportedException();}    public String composeName(String name, String prefix) throws NamingException {throw new OperationNotSupportedException();}    public Name composeName(Name name, Name prefix) throws NamingException {throw new OperationNotSupportedException();}    public Object addToEnvironment(String propName, Object propVal)	throws NamingException {throw new OperationNotSupportedException();}    public Object removeFromEnvironment(String propName) throws NamingException {throw new OperationNotSupportedException();}    public Hashtable getEnvironment() throws NamingException {throw new OperationNotSupportedException();}    public void close() throws NamingException {throw new OperationNotSupportedException();}    public void modifyAttributes(Name name, int mod_op, Attributes attrs) throws NamingException {throw new OperationNotSupportedException();}    public void modifyAttributes(String name, int mod_op, Attributes attrs) throws NamingException {throw new OperationNotSupportedException();}    public void modifyAttributes(Name name, ModificationItem[] mods) throws NamingException {throw new OperationNotSupportedException();}    public void modifyAttributes(String name, ModificationItem[] mods) throws NamingException {throw new OperationNotSupportedException();}    public void bind(Name name, Object obj, Attributes attrs) throws NamingException {throw new OperationNotSupportedException();}    public void bind(String name, Object obj, Attributes attrs) throws NamingException {throw new OperationNotSupportedException();}    public void rebind(Name name, Object obj, Attributes attrs) throws NamingException {throw new OperationNotSupportedException();}    public void rebind(String name, Object obj, Attributes attrs) throws NamingException {throw new OperationNotSupportedException();}    public DirContext createSubcontext(Name name, Attributes attrs) throws NamingException {throw new OperationNotSupportedException();}    public DirContext createSubcontext(String name, Attributes attrs) throws NamingException {throw new OperationNotSupportedException();}    public DirContext getSchema(Name name) throws NamingException {throw new OperationNotSupportedException();}    public DirContext getSchema(String name) throws NamingException {throw new OperationNotSupportedException();}    public DirContext getSchemaClassDefinition(Name name) throws NamingException {throw new OperationNotSupportedException(); }    public DirContext getSchemaClassDefinition(String name) throws NamingException {throw new OperationNotSupportedException(); }    public NamingEnumeration search(Name name,Attributes matchingAttributes,String[] attributesToReturn) throws NamingException {throw new OperationNotSupportedException();}    public NamingEnumeration search(String name,Attributes matchingAttributes,String[] attributesToReturn) throws NamingException {throw new OperationNotSupportedException();}    public NamingEnumeration search(Name name,Attributes matchingAttributes) throws NamingException {throw new OperationNotSupportedException();}    public NamingEnumeration search(String name,Attributes matchingAttributes) throws NamingException {throw new OperationNotSupportedException();}    public NamingEnumeration search(Name name,String filter,SearchControls cons) throws NamingException {throw new OperationNotSupportedException();}    public NamingEnumeration search(String name,String filter,SearchControls cons) throws NamingException {throw new OperationNotSupportedException();}    public NamingEnumeration search(Name name,String filterExpr,Object[] filterArgs,SearchControls cons) throws NamingException {throw new OperationNotSupportedException();}    public NamingEnumeration search(String name,String filterExpr,Object[] filterArgs,SearchControls cons) throws NamingException {throw new OperationNotSupportedException();}  }/*  <LdapXQL>      <config_info>        <context_factory>com.sun.jndi.ldap.LdapCtxFactory</context_factory>        <provider_url>ldap://localhost:389/o=JNDITutorial</provider_url>      </config_info>      <insert>        <name>new object's distinguished name</name>        <attrlist>          <attr name="attr1" encodeaction="literal" encodeclass="">            <value>newvalue</value>            <value>newvalue</value>          </attr>        </attrlist>      </insert>    </LdapXQL> */  void ExecuteInsert(Node a_nodeInsert)    throws Exception  {    // FIRST extract the new object's data from the xml fields:    // - attr name    // - attr value(s)    // - encode/encrypt (soon to come: custom encoders)    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: performing insert request");    String l_sNewObjectDistinguishedName = null;    Attributes l_attrs = null;    NodeList l_nodelist = a_nodeInsert.getChildNodes();    for (int i=0; i < l_nodelist.getLength(); i++)    {      Node l_nodeChild = l_nodelist.item(i);      if (l_nodeChild.getNodeType() == Node.ELEMENT_NODE)      {        String l_sName = l_nodeChild.getNodeName();        // get the distinguished name this object will be stored in ldap as (the <name> ELEMENT)        if (l_sName.equals("name"))        {          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: parsing out DN of new object");          l_sNewObjectDistinguishedName = GetElementValue(l_nodeChild);          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: DN is: "+l_sNewObjectDistinguishedName);        }        // get the attribute list that describes the data and data storage        else if (l_sName.equals("attrlist"))        {          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: parsing out attribute name-value(s)");          l_attrs = new BasicAttributes(true);          // go through each attribute <attr> tag contained in the <attrlist> element          NodeList l_nodelistAttrs = l_nodeChild.getChildNodes();          for (int k=0; k < l_nodelistAttrs.getLength(); k++)          {            Node l_nodeAttr = l_nodelistAttrs.item(k);            // load the specifications as to how this attr is named and will be encoded, encode the data            if (l_nodeAttr.getNodeType() == Node.ELEMENT_NODE)              if (l_nodeAttr.getNodeName().equals("attr"))              {                //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: parsing next attribute");                String l_sAttrName = null;                String l_sAttrAction = "literal";                String l_sPreCustom = null;                String l_sPostCustom = null;                // get this attribute's name and encoding data. There must be a "name" attr, or we can't do anything                NamedNodeMap l_namednodemap = l_nodeAttr.getAttributes();                Node l_nodeLdapAttrName = l_namednodemap.getNamedItem("name");                if (l_nodeLdapAttrName != null)                {                  // create a new BasicAttribute object to store the object's data for this attribute                  BasicAttribute l_basicattr = new BasicAttribute(GetElementValue(l_nodeLdapAttrName));                  l_sAttrName = GetElementValue(l_nodeLdapAttrName);                  //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: attr name: "+l_sAttrName);                  Node l_nodeEncodeAction = l_namednodemap.getNamedItem("encodeaction");                  if (l_nodeEncodeAction != null)                  {                    l_sAttrAction = GetElementValue(l_nodeEncodeAction);                    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: encoding action: "+l_sAttrAction);                  }                  // custom encoding (PRE)                  Node l_nodePreCustomEncode = l_namednodemap.getNamedItem("preencodeclass");                  if (l_nodePreCustomEncode != null)                  {                    l_sPreCustom = GetElementValue(l_nodePreCustomEncode);                    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: pre-encoding custom action: "+l_sPreCustom);                  }                  // custom encoding (POST)                  Node l_nodePostCustomEncode = l_namednodemap.getNamedItem("postencodeclass");                  if (l_nodePostCustomEncode != null)                  {                    l_sPostCustom = GetElementValue(l_nodePostCustomEncode);                    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: post-encoding custom action: "+l_sPostCustom);                  }                  // load up the attribute data                  NodeList l_nodelistAttrValues = l_nodeAttr.getChildNodes();                  //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: loading attribute value list");                  for (int j=0; j < l_nodelistAttrValues.getLength(); j++)                  {                    Node l_nodeValue = l_nodelistAttrValues.item(j);                    if (l_nodeValue.getNodeType() == Node.ELEMENT_NODE)                      if (l_nodeValue.getNodeName().equals("value"))                      {                        String l_sValue = GetElementValue(l_nodeValue);                        //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: next attribute value (before encoding): "+l_sValue);                        // custom encoding handler (PRE)                        if (l_sPreCustom != null)                        {                          // instantiate the custom encoder                          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: instantiating pre-encoding handler: "+l_sPreCustom);                          LdapXQLDataEncoder l_customencoder = null;                          try {                            l_customencoder = (LdapXQLDataEncoder)Class.forName(l_sPreCustom).newInstance();                          } catch (java.lang.ClassNotFoundException cnfe) {                            //+error+*/logger.error("SunLdapXQLEngine.ExecuteInsert() :: could not find pre-encoding handler class",cnfe);                            throw(cnfe);                          } catch (Exception e) {                            //+error+*/logger.error("SunLdapXQLEngine.ExecuteInsert() :: exception thrown while instantiating pre-encoding handler class",e);                            throw(e);                          }                          // okay, now let's try to execute it                          try {                            //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: executing pre-encoding handler class");                            l_sValue = l_customencoder.encode(i_dircontext, i_htEncodeDecodeData, l_sValue);                            //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: value after pre-encoding exec: "+l_sValue);                          } catch (Exception e) {                            //+error+*/logger.error("SunLdapXQLEngine.ExecuteInsert() :: exception thrown while executing pre-encoding handler class",e);                            throw(e);                          }                        }                        // encoding?                        //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: performing standard encoding operation");                        if (l_sAttrAction.equals("") || l_sAttrAction.equals("literal"))                        {                          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: literal: no encoding performed");                        }                        else if (l_sAttrAction.equals("encode"))                        {                          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: base64 encoding");                          l_sValue = new BASE64Encoder().encode(l_sValue.getBytes());                          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: base64 output: "+l_sValue);                        }                        else if (l_sAttrAction.equals("encryptencode"))                          try {                            //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: encrypt-base64 encode");                            Cipher l_cipher = Cipher.getInstance((String)i_htEncodeDecodeData.get("EncryptionAlgorithm"));                            l_cipher.init(Cipher.ENCRYPT_MODE, (Key)i_htEncodeDecodeData.get("EncryptionKey"));                            l_sValue = new BASE64Encoder().encode(l_cipher.doFinal(l_sValue.getBytes()));                            //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: encrypt-base64 output: "+l_sValue);                          } catch (java.security.InvalidKeyException ike) {                            //+error+*/logger.error("SunLdapXQLEngine.ExecuteInsert() :: invalid key used for encryption",ike);                            throw(ike);                          } catch (GeneralSecurityException gse) {                            //+error+*/logger.error("SunLdapXQLEngine.ExecuteInsert() :: general security exception thrown during encryption",gse);                            throw(gse);                          }                        // custom encoding handler (POST)                        //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: check for post-encoding handler");                        if (l_sPostCustom != null)                        {                          // instantiate the custom encoder                          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: post-encoding handler detected.");                          LdapXQLDataEncoder l_customencoder = null;                          try {                            //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: instantiating post-encoding handler: "+l_sPostCustom);                            l_customencoder = (LdapXQLDataEncoder)Class.forName(l_sPostCustom).newInstance();                          } catch (java.lang.ClassNotFoundException cnfe) {                            //+error+*/logger.error("SunLdapXQLEngine.ExecuteInsert() :: post-encoding handler class could not be found",cnfe);                            throw(cnfe);                          } catch (Exception e) {                            //+error+*/logger.error("SunLdapXQLEngine.ExecuteInsert() :: exception thrown while instantiating post-encoding handler",e);                            throw(e);                          }                          // okay, now let's try to execute it                          try {                            //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: executing post-encoding handler");                            l_sValue = l_customencoder.encode(i_dircontext, i_htEncodeDecodeData, l_sValue);                            //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: post-encoding handler output: "+l_sValue);                          } catch (Exception e) {                            //+error+*/logger.error("SunLdapXQLEngine.ExecuteInsert() :: exception thrown while executing post-encoding handler",e);                            throw(e);                          }                        }                        // add the attribute value to the ldap attribute object                        //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: adding attr value to value list");                        l_basicattr.add(l_sValue);                      }                  }                  // add the attribute and its data to the attribute list                  //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: adding attr and value list to attribute structure");                  l_attrs.put(l_basicattr);                }              }          }        }      }    }    // SECOND instantiate a NewLdapObject and set it up to be inserted into LDAP    // - place transformed data into the object    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: creating new LDAP object");    NewLdapObject l_newldapobj = new NewLdapObject(l_sNewObjectDistinguishedName, l_attrs);    // THIRD bind the new Ldap object (which inserts it into the directory)    try {      //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: binding new LDAP object");      i_dircontext.bind(l_sNewObjectDistinguishedName,l_newldapobj);      //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: binding successful");    } catch (NamingException ne) {      //+error+*/logger.error("SunLdapXQLEngine.ExecuteInsert() :: naming exception while binding new object to LDAP",ne);      throw (ne);    }    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteInsert() :: insert of record completed without error");  }/*  <LdapXQL>      <update>        <name>new object's distinguished name</name>        <attrlist>          <attr name="attr1" operation="replace" encodeaction="literal" encodeclass="">            <value>newvalue</value>            <value>newvalue</value>          </attr>        </attrlist>      </update>    </LdapXQL> */  void ExecuteUpdate(Node a_nodeUpdate)    throws Exception  {    /* ongoing: how do updates/deletes to many objects, not just one? <level specifier> */    // scan the attribute list and apply updates (insert, update, or delete attrs [later feature: append for multi-values])    String l_sObjectDistinguishedName = null;    Vector l_vecUpdates = new Vector();    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: executing update");    NodeList l_nodelist = a_nodeUpdate.getChildNodes();    for (int i=0; i < l_nodelist.getLength(); i++)    {      Node l_nodeChild = l_nodelist.item(i);      if (l_nodeChild.getNodeType() == Node.ELEMENT_NODE)      {        String l_sName = l_nodeChild.getNodeName();        // get the distinguished name this object will be stored in ldap as (the <name> ELEMENT)        if (l_sName.equals("name"))        {          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: parsing DN of object to be updated");          l_sObjectDistinguishedName = GetElementValue(l_nodeChild);          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: DN of object to be updated: "+l_sObjectDistinguishedName);        }        // get the attribute list that describes the data and data storage        else if (l_sName.equals("attrlist"))        {          // go through each attribute <attr> tag contained in the <attrlist> element          NodeList l_nodelistAttrs = l_nodeChild.getChildNodes();          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: parsing attribute names and values to be updated");          for (int k=0; k < l_nodelistAttrs.getLength(); k++)          {            Node l_nodeAttr = l_nodelistAttrs.item(k);            // load the specifications as to how this attr is named and will be encoded, encode the data            if (l_nodeAttr.getNodeType() == Node.ELEMENT_NODE)              if (l_nodeAttr.getNodeName().equals("attr"))              {                //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: parsing next attribute");                String l_sAttrName = null;                String l_sAttrOperation = "replace";                String l_sAttrAction = "literal";                String l_sAttrCustom = null;                String l_sPreCustom = null;                // get this attribute's name and encoding data. There must be a "name" attr, or we can't do anything                NamedNodeMap l_namednodemap = l_nodeAttr.getAttributes();                Node l_nodeLdapAttrName = l_namednodemap.getNamedItem("name");                if (l_nodeLdapAttrName != null)                {                  // create a new BasicAttribute object to store the object's data for this attribute                  BasicAttribute l_basicattr = new BasicAttribute(GetElementValue(l_nodeLdapAttrName));                  l_sAttrName = GetElementValue(l_nodeLdapAttrName);                  //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: attribute name: "+l_sAttrName);                  // attribute update method (delete, insert, update of attributes [append])                  Node l_nodeOp = l_namednodemap.getNamedItem("operation");                  if (l_nodeOp != null)                  {                    l_sAttrOperation = GetElementValue(l_nodeOp); /* this is an attribute node, not an element node....*/                    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: update operation: "+l_sAttrOperation);                  }                  // standard encoding                  Node l_nodeEncodeAction = l_namednodemap.getNamedItem("encodeaction");                  if (l_nodeEncodeAction != null)                  {                    l_sAttrAction = GetElementValue(l_nodeEncodeAction); /* this is an attribute node, not an element node....*/                    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: standard encoding action: "+l_sAttrAction);                  }                  // custom encoding (PRE)                  Node l_nodeCustomPreEncode = l_namednodemap.getNamedItem("preencodeclass");                  if (l_nodeCustomPreEncode != null)                  {                    l_sPreCustom = GetElementValue(l_nodeCustomPreEncode);                    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: pre-encoding custom handler: "+l_sPreCustom);                  }                  // custom encoding (POST)                  Node l_nodeCustomEncode = l_namednodemap.getNamedItem("postencodeclass");                  if (l_nodeCustomEncode != null)                  {                    l_sAttrCustom = GetElementValue(l_nodeCustomEncode);                    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: post-encoding custom handler: "+l_sAttrCustom);                  }                  // load up the attribute data                  NodeList l_nodelistAttrValues = l_nodeAttr.getChildNodes();                  //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: parsing value list");                  for (int j=0; j < l_nodelistAttrValues.getLength(); j++)                  {                    Node l_nodeValue = l_nodelistAttrValues.item(j);                    if (l_nodeValue.getNodeType() == Node.ELEMENT_NODE)                      if (l_nodeValue.getNodeName().equals("value"))                      {                        String l_sValue = GetElementValue(l_nodeValue);                        //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: adding next value - pre-encode value: "+l_sValue);                        // custom encoding handler (PRE)                        if (l_sPreCustom != null)                        {                          // instantiate the custom encoder                          LdapXQLDataEncoder l_customencoder = null;                          try {                            //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: instantiating pre-encode handler");                            l_customencoder = (LdapXQLDataEncoder)Class.forName(l_sPreCustom).newInstance();                          } catch (java.lang.ClassNotFoundException cnfe) {                            //+error+*/logger.error("SunLdapXQLEngine.ExecuteUpdate() :: pre-encode handler class not found",cnfe);                            throw(cnfe);                          } catch (Exception e) {                            //+error+*/logger.error("SunLdapXQLEngine.ExecuteUpdate() :: exception thrown while instantiating pre-encode handler",e);                            throw(e);                          }                          // okay, now let's try to execute it                          try {                            //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: executing pre-encode handler");                            l_sValue = l_customencoder.encode(i_dircontext, i_htEncodeDecodeData, l_sValue);                            //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: pre-encode handler output: "+l_sValue);                          } catch (Exception e) {                            //+error+*/logger.error("SunLdapXQLEngine.ExecuteUpdate() :: exception thrown while executing pre-encode handler",e);                            throw(e);                          }                        }                        // encoding?                        //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: executing standard encoding");                        if (l_sAttrAction.equals("") || l_sAttrAction.equals("literal"))                        {                          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: no encoding performed");                        }                        else if (l_sAttrAction.equals("encode"))                        {                          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: base64 encoding ");                          l_sValue = new BASE64Encoder().encode(l_sValue.getBytes());                          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: base64 output: "+l_sValue);                        }                        else if (l_sAttrAction.equals("encryptencode"))                          try {                            //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: encrypt-base64 encode");                            String strAlgo = (String)i_htEncodeDecodeData.get("EncryptionAlgorithm");                            Cipher l_cipher = Cipher.getInstance((String)i_htEncodeDecodeData.get("EncryptionAlgorithm"));                            l_cipher.init(Cipher.ENCRYPT_MODE, (Key)i_htEncodeDecodeData.get("EncryptionKey"));                            l_sValue = new BASE64Encoder().encode(l_cipher.doFinal(l_sValue.getBytes()));                            //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: encrypt-base64 encode output: "+l_sValue);                          } catch (java.security.InvalidKeyException ike) {                            //+error+*/logger.error("SunLdapXQLEngine.ExecuteUpdate() :: invalid key exception during encrypt-encode",ike);                            throw(ike);                          } catch (GeneralSecurityException gse) {                            //+error+*/logger.error("SunLdapXQLEngine.ExecuteUpdate() :: general security exception during encrypt-encode",gse);                            throw(gse);                          }                        // custom encoding handler?                        //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: checking for post-encode handler");                        if (l_sAttrCustom != null)                        {                          // instantiate the custom encoder                          LdapXQLDataEncoder l_customencoder = null;                          try {                            //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: handler detected, instantiating");                            l_customencoder = (LdapXQLDataEncoder)Class.forName(l_sAttrCustom).newInstance();                          } catch (java.lang.ClassNotFoundException cnfe) {                            //+error+*/logger.error("SunLdapXQLEngine.ExecuteUpdate() :: custom post-encoder class not found",cnfe);                            throw(cnfe);                          } catch (Exception e) {                            //+error+*/logger.error("SunLdapXQLEngine.ExecuteUpdate() :: exception during instantiation of custom post-encoder",e);                            throw(e);                          }                          // okay, now let's try to execute it                          try {                            //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: executing post-encoding handler");                            l_sValue = l_customencoder.encode(i_dircontext, i_htEncodeDecodeData, l_sValue);                            //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: ouput of post-encoding handler: "+l_sValue);                          } catch (Exception e) {                            //+error+*/logger.error("SunLdapXQLEngine.ExecuteUpdate() :: exception during execution of custom post-encoder",e);                            throw(e);                          }                        }                        // add the attribute value to the ldap attribute object                        //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: adding parsed and encoded value");                        l_basicattr.add(l_sValue);                      }                  }                  // add the attribute and its data to the attribute modification list                  //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: adding attribute and value list to updates list");                  if (l_sAttrOperation.equals("replace"))                  {                    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: attribute update is a replacement operation");                    l_vecUpdates.add(new ModificationItem(DirContext.REPLACE_ATTRIBUTE,l_basicattr));                  }                  else if (l_sAttrOperation.equals("remove"))                  {                    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: attribute update is a removal operation");                    l_vecUpdates.add(new ModificationItem(DirContext.REMOVE_ATTRIBUTE,l_basicattr));                  }                  else if (l_sAttrOperation.equals("add"))                  {                    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: attribute update is a value append operation");                    l_vecUpdates.add(new ModificationItem(DirContext.ADD_ATTRIBUTE,l_basicattr));                  }                }              }          }        }      }    }    // convert Updates vector to an array of ModificationItem...    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: creating update specification data structure");    ModificationItem[] l_moditemarr = new ModificationItem[l_vecUpdates.size()];    for (int i=0; i < l_vecUpdates.size(); i++)      l_moditemarr[i] = (ModificationItem)l_vecUpdates.get(i);    // apply updates    try {      //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: applying updates");      i_dircontext.modifyAttributes(l_sObjectDistinguishedName,l_moditemarr);      //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: updates applied successfully");    } catch (NamingException ne) {      //+error+*/logger.error("SunLdapXQLEngine.ExecuteUpdate() :: update attempt threw a naming exception",ne);      throw (ne);    }  }/*  <LdapXQL>      <config_info>        <context_factory>com.sun.jndi.ldap.LdapCtxFactory</context_factory>        <provider_url>ldap://localhost:389/o=JNDITutorial</provider_url>      </config_info>      <delete>        <name>new object's distinguished name</name>      </delete>    </LdapXQL> */  void ExecuteDelete(Node a_nodeDelete)    throws Exception  {    String l_sObjectDistinguishedName = null;    // get distinguished name of object to be deleted    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteDelete() :: Executing a Delete operation");    NodeList l_nodelist = a_nodeDelete.getChildNodes();    //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteDelete() :: locating DN of object to be deleted");    for (int i=0; i < l_nodelist.getLength(); i++)    {      Node l_nodeChild = l_nodelist.item(i);      if (l_nodeChild.getNodeType() == Node.ELEMENT_NODE)      {        String l_sName = l_nodeChild.getNodeName();        if (l_sName.equals("name"))        {          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: DN located, parsing...");          l_sObjectDistinguishedName = GetElementValue(l_nodeChild);          //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: DN to be deleted: "+l_sObjectDistinguishedName);        }      }    }    // check if it's in the directory (pranav's fix)    try {      //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: checking for entry's existence");      i_dircontext.lookup(l_sObjectDistinguishedName);      //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: entry bind did not throw an error");    } catch (NameNotFoundException nnfe) {      //+error+*/logger.error("SunLdapXQLEngine.ExecuteUpdate() :: attempt to locate object to be deleted failed",nnfe);      throw (nnfe);    }    // delete it from LDAP    try {      //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: executing delete operation");      i_dircontext.destroySubcontext(l_sObjectDistinguishedName);      //+debug+*/logger.debug("SunLdapXQLEngine.ExecuteUpdate() :: delete operation completed without error");    } catch (NamingException ne) {      //+error+*/logger.error("SunLdapXQLEngine.ExecuteUpdate() :: delete attempt threw a naming exception",ne);      throw (ne);    }  }  void OverrideConnectionEnvironment(Document a_xdocLdapXql)    throws Exception  {    //+debug+*/logger.debug("SunLdapXQLEngine.OverrideConnectionEnvironment() :: overriding connection environment settings");    Node l_nodeTop = a_xdocLdapXql.getDocumentElement();    NodeList l_nodelistConfigSearch = l_nodeTop.getChildNodes();    Node l_nodeConfig = null;    //+debug+*/logger.debug("SunLdapXQLEngine.OverrideConnectionEnvironment() :: scanning for config_info node");    for (int i=0; i < l_nodelistConfigSearch.getLength(); i++)    {      Node l_nodeChild = l_nodelistConfigSearch.item(i);      if (l_nodeChild.getNodeType() == Node.ELEMENT_NODE)        if (l_nodeChild.getNodeName().equals("config_info"))          l_nodeConfig = l_nodeChild;    }    // if the config node was not found, just return. Guess there ain't no config info...    if (l_nodeConfig == null)    {      //+warning+*/logger.warn("SunLdapXQLEngine.OverrideConnectionEnvironment() :: config_info not found");      return;    }    //+debug+*/logger.debug("SunLdapXQLEngine.OverrideConnectionEnvironment() :: scanning config_info nodes...");    l_nodelistConfigSearch = l_nodeConfig.getChildNodes();    for (int i=0; i < l_nodelistConfigSearch.getLength(); i++)    {      Node l_nodeChild = l_nodelistConfigSearch.item(i);      if (l_nodeChild.getNodeType() == Node.ELEMENT_NODE)      {        String l_sConfigName = l_nodeChild.getNodeName();        String l_sConfigData = GetElementValue(l_nodeChild);        //+debug+*/logger.debug("SunLdapXQLEngine.OverrideConnectionEnvironment() :: node: "+l_sConfigName);        if (l_sConfigName.equals("provider_url")) {          //+debug+*/logger.debug("SunLdapXQLEngine.OverrideConnectionEnvironment() :: provider_url set to "+l_sConfigData);          l_sConfigName = Context.PROVIDER_URL;        } else if (l_sConfigName.equals("context_factory")) {          //+debug+*/logger.debug("SunLdapXQLEngine.OverrideConnectionEnvironment() :: context_factory set to "+l_sConfigData);          l_sConfigName = Context.INITIAL_CONTEXT_FACTORY;        } else if (l_sConfigName.equals("security_authentication")) {          //+debug+*/logger.debug("SunLdapXQLEngine.OverrideConnectionEnvironment() :: authentication method set to "+l_sConfigData);          l_sConfigName = Context.SECURITY_AUTHENTICATION;        } else if (l_sConfigName.equals("security_principal")) {          //+debug+*/logger.debug("SunLdapXQLEngine.OverrideConnectionEnvironment() :: principal method set to "+l_sConfigData);          l_sConfigName = Context.SECURITY_PRINCIPAL;        } else if (l_sConfigName.equals("security_credentials")) {          //+debug+*/logger.debug("SunLdapXQLEngine.OverrideConnectionEnvironment() :: credential set.");          l_sConfigName = Context.SECURITY_CREDENTIALS;        }        i_htConnectionData.put(l_sConfigName, l_sConfigData);      }    }    //+debug+*/logger.debug("SunLdapXQLEngine.OverrideConnectionEnvironment() :: connection environment setting completed");  }  // this needs to go in an XML utility class as a static method...  String GetElementValue(Node a_nodeElement)  {    NodeList l_nodelist = a_nodeElement.getChildNodes();    for (int i=0; i<l_nodelist.getLength();i++)      if (l_nodelist.item(i).getNodeType() == Node.TEXT_NODE)        return (l_nodelist.item(i).getNodeValue());    return null;  }  void OverrideEncodeDecodeData(Document a_xdocLdapXql)    throws Exception  {    /* how do we handle the Key? "Must be programmatic"? */    /* - implement a similar decode/decrypt/deserialize deal */    //+debug+*/logger.debug("SunLdapXQLEngine.OverrideEncodeDecodeData() :: overriding encode/decode data");    Node l_nodeTop = a_xdocLdapXql.getDocumentElement();    NodeList l_nodelistCoding = l_nodeTop.getChildNodes();    Node l_nodeCoding = null;    //+debug+*/logger.debug("SunLdapXQLEngine.OverrideEncodeDecodeData() :: scanning for encode_decode_data node");    for (int i=0; i < l_nodelistCoding.getLength(); i++)    {      Node l_nodeChild = l_nodelistCoding.item(i);      if (l_nodeChild.getNodeType() == Node.ELEMENT_NODE)        if (l_nodeChild.getNodeName().equals("encode_decode_data"))          l_nodeCoding = l_nodeChild;    }    // if the encode/decode node was not found, just return.    if (l_nodeCoding == null)    {      //+warning+*/logger.warn("SunLdapXQLEngine.OverrideEncodeDecodeData() :: encode_decode_data section not found");      return;    }    //+debug+*/logger.debug("SunLdapXQLEngine.OverrideEncodeDecodeData() :: coding data found, extracting...");    l_nodelistCoding = l_nodeCoding.getChildNodes();    for (int i=0; i < l_nodelistCoding.getLength(); i++)    {      Node l_nodeChild = l_nodelistCoding.item(i);      if (l_nodeChild.getNodeType() == Node.ELEMENT_NODE)      {        String l_sName = l_nodeChild.getNodeName();        //+debug+*/logger.debug("SunLdapXQLEngine.OverrideEncodeDecodeData() :: encountered node "+l_sName);        String l_sData = GetElementValue(l_nodeChild);        NamedNodeMap l_namednodemap = l_nodeChild.getAttributes();        Node l_nodeAction = l_namednodemap.getNamedItem("decodeaction");        if (l_nodeAction != null)        {          String l_sAttrAction = GetElementValue(l_nodeAction);          //+debug+*/logger.debug("SunLdapXQLEngine.OverrideEncodeDecodeData() :: decode action: "+l_sAttrAction);          if (l_sAttrAction.equals("literal"))          {            i_htEncodeDecodeData.put(l_sName, l_sData);          }          else if (l_sAttrAction.equals("decode"))          {            String l_sDecodedData = null;            try {              //+debug+*/logger.debug("SunLdapXQLEngine.OverrideEncodeDecodeData() :: performing base64 decoding");              l_sDecodedData = new String(new BASE64Decoder().decodeBuffer(l_sData));              //+debug+*/logger.debug("SunLdapXQLEngine.OverrideEncodeDecodeData() :: decoded successfully");            } catch (java.io.IOException ioe) {              //+error+*/logger.error("SunLdapXQLEngine.OverrideEncodeDecodeData() :: unable to decode data from encode_decode_data section",ioe);              throw(ioe);            }            i_htEncodeDecodeData.put(l_sName, l_sDecodedData);          }          else if (l_sAttrAction.equals("decodedeserialize"))          {            Object l_obj;            // either decode or decodedeserialize the object            try {              //+debug+*/logger.debug("SunLdapXQLEngine.OverrideEncodeDecodeData() :: performing base64 decoding-deserialization");              l_obj = new ObjectInputStream(                          new ByteArrayInputStream(                             new BASE64Decoder().decodeBuffer(l_sData))).readObject();              //+debug+*/logger.debug("SunLdapXQLEngine.OverrideEncodeDecodeData() :: decoded-deserialized successfully");            } catch (java.io.StreamCorruptedException sce) {              //+error+*/logger.error("SunLdapXQLEngine.OverrideEncodeDecodeData() :: stream corrupted - unable to decode-deserialize",sce);              throw(sce);            } catch (java.io.IOException ioe) {              //+error+*/logger.error("SunLdapXQLEngine.OverrideEncodeDecodeData() :: i/o error - unable to decode-deserialize",ioe);              throw(ioe);            } catch (java.lang.ClassNotFoundException cnfe) {              //+error+*/logger.error("SunLdapXQLEngine.OverrideEncodeDecodeData() :: class not found - unable to decode-deserialize",cnfe);              throw(cnfe);            }            i_htEncodeDecodeData.put(l_sName, l_obj);          }        }        else          i_htEncodeDecodeData.put(l_sName, l_sData);      }    }    //+debug+*/logger.debug("SunLdapXQLEngine.OverrideEncodeDecodeData() :: encode_decode_data override completed without error");  }}